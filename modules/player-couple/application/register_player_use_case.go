package application

import (
	"github.com/paguerre3/goddd/modules/player-couple/domain"
)

type RegisterPlayerStatus uint8
type UnregisterPlayerStatus uint8

const (
	RegisterPlayerPending RegisterPlayerStatus = iota
	RegisterPlayerUpdated
	RegisterPlayerCreated
	UnregisterPlayerPending UnregisterPlayerStatus = iota
	UnregisterPlayerNotFound
	UnregisterPlayerDeleted
)

// RegisterPlayerUseCase registers a player or updates it if it already exists.
func (s *PlayerCoupleService) RegisterPlayerUseCase(inputPlayer domain.Player) (status RegisterPlayerStatus, err error) {
	// Validate new player entries.
	newPlayer, err := domain.NewPlayer(s.idGen,
		inputPlayer.Email,
		inputPlayer.SocialSecurityNumber,
		inputPlayer.FirstName,
		inputPlayer.LastName,
		inputPlayer.Age)
	if err != nil {
		return status, err
	}

	// Check if the player already exists.
	var foundPlayer domain.Player
	if len(inputPlayer.ID) > 0 {
		// Reset the player ID if it was autogenerated.
		newPlayer.ID = inputPlayer.ID
		foundPlayer, err = s.playerRepo.FindByID(inputPlayer.ID)
	} else {
		foundPlayer, err = s.playerRepo.FindByEmail(inputPlayer.Email)
		if len(foundPlayer.ID) > 0 {
			// If playar was found by email ensure to reset ID if it was autogenerated.
			newPlayer.ID = foundPlayer.ID
		}
	}
	if err != nil {
		return status, err
	}

	// Ensure existing player isn't an empty struct:
	if len(foundPlayer.ID) > 0 {
		err = s.playerRepo.Update(*newPlayer)
		if err == nil {
			status = RegisterPlayerUpdated
		}
	} else {
		err = s.playerRepo.Save(*newPlayer)
		if err == nil {
			status = RegisterPlayerCreated
		}
	}

	return status, err
}

func (s *PlayerCoupleService) UnregisterPlayerUseCase(playerId string) (status UnregisterPlayerStatus, err error) {
	foundPlayer, err := s.playerRepo.FindByID(playerId)
	if err != nil {
		return status, err
	}
	if len(foundPlayer.ID) == 0 {
		status = UnregisterPlayerNotFound
		return status, nil
	}
	if err = s.playerRepo.Delete(playerId); err != nil {
		return status, err
	}
	status = UnregisterPlayerDeleted
	return status, nil
}

package application

import (
	"github.com/paguerre3/goddd/modules/player-couple/domain"
)

// Upsert Player Use Case:
func (playerCoupleService *PlayerCoupleService) RegisterOrUpdatePlayerUseCase(inputPlayer domain.Player) (err error) {
	// validate new player entries:
	newPlayer, err := domain.NewPlayer(playerCoupleService.idGen,
		inputPlayer.Email,
		inputPlayer.SocialSecurityNumber,
		inputPlayer.FirstName,
		inputPlayer.LastName,
		inputPlayer.Age)
	if err != nil {
		return err
	}
	var existentPlayer *domain.Player
	if len(inputPlayer.ID) == 0 {
		// if no error browse if email already exists:
		foundPlayer, err := playerCoupleService.playerRepo.FindByEmail(newPlayer.Email)
		if err != nil {
			return err
		}
		// ensure it isn't an empty struct:
		if (foundPlayer != domain.Player{}) {
			existentPlayer = &foundPlayer
		}
	} else {
		// reset player id autogenerated if input Id exists:
		newPlayer.ID = inputPlayer.ID
		foundPlayer, err := playerCoupleService.playerRepo.FindByID(inputPlayer.ID)
		if err != nil {
			return err
		}
		// ensure it isn't an empty struct:
		if (foundPlayer != domain.Player{}) {
			existentPlayer = &foundPlayer
		}
	}
	if existentPlayer != nil {
		err = playerCoupleService.playerRepo.Update(*newPlayer)
	} else {
		err = playerCoupleService.playerRepo.Save(*newPlayer)
	}
	return err
}
